{
	"info": {
		"_postman_id": "f5785d15-c53a-41bd-b641-13285d5fe733",
		"name": "Restful Booker (cookie auth + QA tests)",
		"description": "Full Restful Booker collection with cookie auth and a few QA tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9917303"
	},
	"item": [
		{
			"name": "Utilities",
			"item": [
				{
					"name": "Healthcheck - /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ping returns 201 or 200\", function () {",
									"  pm.expect([200, 201]).to.include(pm.response.code);",
									"});",
									"pm.test(\"Response time < 1000ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth - Get token (/auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Auth status 200', () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test('Token exists', () => pm.expect(json.token).to.be.a('string'));",
									"pm.environment.set('token', json.token);",
									"pm.test('Set token env var', () => pm.expect(pm.environment.get('token')).to.equal(json.token));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking - Public endpoints",
			"item": [
				{
					"name": "Get all booking IDs (/booking)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.test('Returns an array', () => pm.expect(data).to.be.an('array'));",
									"if (data.length) { pm.environment.set('bookingId', data[0].bookingid || data[0].id || data[0]); }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter booking IDs by name (/booking?firstname&lastname)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('Is array', () => pm.expect(pm.response.json()).to.be.an('array'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by id (/booking/:id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test('Has core fields', () => {",
									"  ['firstname','lastname','totalprice','depositpaid','bookingdates'].forEach(k => pm.expect(json).to.have.property(k));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth-only endpoints (with Cookie: token=...)",
			"item": [
				{
					"name": "Create booking (POST /booking)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token');",
									"if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create status 200/201', () => pm.expect([200,201]).to.include(pm.response.code));",
									"const json = pm.response.json();",
									"pm.environment.set('bookingId', json.bookingid);",
									"pm.test('bookingId saved', () => pm.expect(pm.environment.get('bookingId')).to.be.ok);",
									"pm.test('Has booking object', () => pm.expect(json).to.have.property('booking'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Jim\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-01-01\",\n    \"checkout\": \"2025-01-05\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update booking (PUT /booking/:id)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token');",
									"if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test('firstname updated', () => pm.expect(json.firstname).to.equal('James'));",
									"pm.test('totalprice updated', () => pm.expect(json.totalprice).to.equal(222));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"James\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 222,\n  \"depositpaid\": false,\n  \"bookingdates\": {\n    \"checkin\": \"2025-02-01\",\n    \"checkout\": \"2025-02-05\"\n  },\n  \"additionalneeds\": \"Lunch\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Update booking (PATCH /booking/:id)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token');",
									"if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test('totalprice patched', () => pm.expect(json.totalprice).to.equal(333));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"totalprice\": 333\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking (DELETE /booking/:id)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token');",
									"if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Delete returns 201/200/204', () => pm.expect([200,201,204]).to.include(pm.response.code));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "QA Flow (create → get → update → patch → delete → negative get)",
			"item": [
				{
					"name": "Auth - Get token (/auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Auth status 200', () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.environment.set('token', json.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token'); if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();",
									"pm.environment.set('bookingId', res.bookingid);",
									"pm.test('Created', () => pm.expect([200,201]).to.include(pm.response.code));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"QA\",\n  \"lastname\": \"Flow\",\n  \"totalprice\": 1,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-01-01\",\n    \"checkout\": \"2025-01-02\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET created booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('200', ()=> pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT update booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token'); if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('200', ()=> pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"QA-Put\",\n  \"lastname\": \"Flow\",\n  \"totalprice\": 2,\n  \"depositpaid\": false,\n  \"bookingdates\": {\n    \"checkin\": \"2025-02-01\",\n    \"checkout\": \"2025-02-02\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH update price",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token'); if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('200', ()=> pm.response.to.have.status(200));",
									"pm.test('price==3', ()=> pm.expect(pm.response.json().totalprice).to.equal(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"totalprice\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const t = pm.environment.get('token'); if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Deleted', ()=> pm.expect([200,201,204]).to.include(pm.response.code));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE: GET deleted booking -> 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('404 after delete', ()=> pm.expect(pm.response.code).to.be.oneOf([404, 405]));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request: if token exists, attach Cookie header",
					"const t = pm.environment.get('token');",
					"if (t) { pm.request.headers.add({ key: 'Cookie', value: `token=${t}` }); }"
				]
			}
		}
	]
}